name: CI

on:
  push:
    branches-ignore: [ v1 ]
  pull_request:
    branches-ignore: [ v1 ]

env:
  COMPOSER_ALLOW_SUPERUSER: '1' # https://getcomposer.org/doc/03-cli.md#composer-allow-superuser
  COMPOSER_INSTALLER_COMMIT: fb22b78362d31c0d2bf516d1f8cdfd2745caa431
  COVERAGE: '0'
  EXT_PCOV_VERSION: '1.0.6'
  INFECTION_VERSION: '0.16.0'

jobs:
  php-cs-fixer:
    name: PHP-CS-Fixer (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    container:
      image: php:${{ matrix.php }}-alpine
      options: >-
        --tmpfs /tmp:exec
        --tmpfs /var/tmp:exec
    strategy:
      matrix:
        php:
          - '7.4'
      fail-fast: false
    timeout-minutes: 5
    env:
      PHP_CS_FIXER_FUTURE_MODE: '1'
      PHP_CS_FIXER_VERSION: '^2.16'
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install system packages
        run: |
          apk add \
            unzip \
      - name: Disable PHP memory limit
        run: echo 'memory_limit=-1' >> /usr/local/etc/php/php.ini
      - name: Install Composer
        run: wget -qO - https://raw.githubusercontent.com/composer/getcomposer.org/$COMPOSER_INSTALLER_COMMIT/web/installer | php -- --install-dir=/usr/local/bin --filename=composer --quiet
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore composer cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: composer-cs-fixer-php${{ matrix.php }}-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            composer-cs-fixer-php${{ matrix.php }}-
          continue-on-error: true
      - name: Install Symfony Flex
        run: |
          composer global require --prefer-dist --no-progress --no-suggest --ansi \
            symfony/flex
      - name: Install PHP-CS-Fixer
        run: |
          composer global require --prefer-dist --no-progress --no-suggest --ansi \
            friendsofphp/php-cs-fixer:"${PHP_CS_FIXER_VERSION}"
      - name: Cache PHP-CS-Fixer results
        uses: actions/cache@v1
        with:
          path: /var/cache/php-cs-fixer
          key: php-cs-fixer-php${{ matrix.php }}-${{ github.sha }}
          restore-keys: |
            php-cs-fixer-php${{ matrix.php }}-
        continue-on-error: true
      - name: Run PHP-CS-Fixer fix
        run: |
          export PATH="$PATH:$HOME/.composer/vendor/bin"
          mkdir -p /var/cache/php-cs-fixer
          php-cs-fixer fix --dry-run --diff --cache-file=/var/cache/php-cs-fixer/.php_cs.cache --ansi

  phpunit:
    name: PHPUnit (Symfony ${{ matrix.symfony }}) (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    container:
      image: php:${{ matrix.php }}-alpine
      options: >-
        --tmpfs /tmp:exec
        --tmpfs /var/tmp:exec
    strategy:
      matrix:
        php:
          - '7.4'
        symfony:
          - '4.4.*'
          - '5.*'
        include:
          - php: '7.4'
            symfony: '4.4.*'
            coverage: true
      fail-fast: false
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install system packages
        run: |
          apk add \
            bash \
            unzip \
            libxslt-dev \
            libpng-dev \
            libjpeg-turbo-dev \
            freetype-dev \
            gnupg \
            git
      - name: Install pcov PHP extension
        if: matrix.coverage
        env:
          BUILD_DIR: /var/tmp/build/ext-pcov-${{ env.EXT_PCOV_VERSION }}
          SRC_DIR: /usr/src/php/ext/pcov
        run: |
          apk add \
            $PHPIZE_DEPS
          mkdir -p "$SRC_DIR" "$BUILD_DIR"
          cd "$SRC_DIR"
          curl -fsSL "https://pecl.php.net/get/pcov-$EXT_PCOV_VERSION.tgz" | tar -zx --strip-components 1
          phpize
          cd "$BUILD_DIR"
          "$SRC_DIR"/configure --config-cache
          make -j"$(nproc)"
          make -j"$(nproc)" install
          docker-php-ext-enable pcov
      - name: Install exif PHP extension
        run: |
          docker-php-ext-install exif xsl
      - name: Install php image extensions
        run: |
          docker-php-ext-configure gd --with-freetype --with-jpeg
          docker-php-ext-install gd
      - name: Disable PHP memory limit
        run: echo 'memory_limit=-1' >> /usr/local/etc/php/php.ini
      - name: Install Composer
        run: wget -qO - https://raw.githubusercontent.com/composer/getcomposer.org/$COMPOSER_INSTALLER_COMMIT/web/installer | php -- --install-dir=/usr/local/bin --filename=composer --quiet
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore composer cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: composer-php${{ matrix.php }}-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            composer-php${{ matrix.php }}-
          continue-on-error: true
      - name: Install Symfony Flex & Configure Symfony Version
        run: |
          composer global require --prefer-dist --no-progress --no-suggest --ansi \
            symfony/flex
          composer config extra.symfony.require "${{ matrix.symfony }}"
      - name: Update project dependencies
        run: |
          mkdir -p /tmp/api-component/core/vendor
          ln -s /tmp/api-component/core/vendor vendor
          composer update --no-progress --no-suggest --ansi
      - name: Clear test app cache
        run: |
          mkdir -p /tmp/api-component/core/var
          ln -s /tmp/api-component/core/var tests/Functional/app/var
          tests/Functional/app/console cache:clear --ansi
      - name: Enable code coverage
        if: matrix.coverage
        run: echo '::set-env name=COVERAGE::1'
      - name: Run PHPUnit tests
        run: |
          mkdir -p build/logs/phpunit
          if [ "$COVERAGE" = '1' ]; then
            vendor/bin/phpunit --coverage-xml=build/logs/phpunit/coverage-xml --coverage-clover=build/logs/phpunit/clover.xml --log-junit=build/logs/phpunit/junit.xml --colors=always
          else
            vendor/bin/phpunit --log-junit build/logs/phpunit/junit.xml --colors=always
          fi
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: phpunit-logs-php${{ matrix.php }}
          path: build/logs/phpunit
        continue-on-error: true
      - name: Upload coverage results to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v1
        with:
          name: phpunit-php${{ matrix.php }}
          flags: phpunit
          fail_ci_if_error: true
        continue-on-error: true
#      - name: Upload coverage results to Codeclimate
#        if: matrix.coverage
#        uses: paambaati/codeclimate-action@v2.5.6
#        env:
#          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
#        with:
#          coverageCommand: echo 'PHPUnit already run...'
#          coverageLocations: build/logs/phpunit/clover.xml:clover
#        continue-on-error: true
      - name: Run Infection Mutation Tests
        if: matrix.coverage
        env: # Or as an environment variable
          STRYKER_DASHBOARD_API_KEY: ${{ secrets.STRYKER_DASHBOARD_API_KEY }}
        run: |
          wget https://github.com/infection/infection/releases/download/$INFECTION_VERSION/infection.phar
          wget https://github.com/infection/infection/releases/download/$INFECTION_VERSION/infection.phar.asc
          gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 493B4AA0
          gpg --with-fingerprint --verify infection.phar.asc infection.phar
          chmod +x infection.phar
          ./infection.phar --only-covered --coverage=build/logs/phpunit --min-covered-msi=85 --threads=30
      - name: Upload Infection Mutation Logs
        if: matrix.coverage
        uses: actions/upload-artifact@v1
        with:
          name: infection-logs-php${{ matrix.php }}
          path: infection.log

  behat:
    name: Behat (Symfony ${{ matrix.symfony }}) (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    container:
      image: php:${{ matrix.php }}-alpine
      options: >-
        --tmpfs /tmp:exec
        --tmpfs /var/tmp:exec
    strategy:
      matrix:
        php:
          - '7.4'
        symfony:
          - '4.4.*'
          - '5.*'
        include:
          - php: '7.4'
            symfony: '4.4.*'
            coverage: true
      fail-fast: false
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install system packages
        run: |
          apk add \
            bash \
            unzip \
            libxslt-dev \
            libpng-dev \
            libjpeg-turbo-dev \
            freetype-dev \
            git
      - name: Install pcov PHP extension
        if: matrix.coverage
        env:
          BUILD_DIR: /var/tmp/build/ext-pcov-${{ env.EXT_PCOV_VERSION }}
          SRC_DIR: /usr/src/php/ext/pcov
        run: |
          apk add \
            $PHPIZE_DEPS
          mkdir -p "$SRC_DIR" "$BUILD_DIR"
          cd "$SRC_DIR"
          curl -fsSL "https://pecl.php.net/get/pcov-$EXT_PCOV_VERSION.tgz" | tar -zx --strip-components 1
          phpize
          cd "$BUILD_DIR"
          "$SRC_DIR"/configure --config-cache
          make -j"$(nproc)"
          make -j"$(nproc)" install
          docker-php-ext-enable pcov
      - name: Install exif PHP extension
        run: |
          docker-php-ext-install exif xsl
      - name: Install php image extensions
        run: |
          docker-php-ext-configure gd --with-freetype --with-jpeg
          docker-php-ext-install gd
      - name: Disable PHP memory limit
        run: echo 'memory_limit=-1' >> /usr/local/etc/php/php.ini
      - name: Install Composer
        run: wget -qO - https://raw.githubusercontent.com/composer/getcomposer.org/$COMPOSER_INSTALLER_COMMIT/web/installer | php -- --install-dir=/usr/local/bin --filename=composer --quiet
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore composer cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: composer-php${{ matrix.php }}-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            composer-php${{ matrix.php }}-
          continue-on-error: true
      - name: Install Symfony Flex & Configure Symfony Version
        run: |
          composer global require --prefer-dist --no-progress --no-suggest --ansi \
            symfony/flex
          composer config extra.symfony.require "${{ matrix.symfony }}"
      - name: Update project dependencies
        run: |
          mkdir -p /tmp/api-component/core/vendor
          ln -s /tmp/api-component/core/vendor vendor
          composer update --no-progress --no-suggest --ansi
      - name: Clear test app cache
        run: |
          mkdir -p /tmp/api-component/core/var
          ln -s /tmp/api-component/core/var tests/Functional/app/var
          tests/Functional/app/console cache:clear --ansi
      - name: Enable code coverage
        if: matrix.coverage
        run: echo '::set-env name=COVERAGE::1'
      - name: Run Behat tests
        run: |
          mkdir -p build/logs/behat
          if [ "$COVERAGE" = '1' ]; then
            vendor/bin/behat --format=progress --out=std --format=junit --out=build/logs/behat/junit --profile=default-coverage --no-interaction --colors --tags='~@wip'
          else
            vendor/bin/behat --format=progress --out=std --format=junit --out=build/logs/behat/junit --profile=default --no-interaction --colors --tags='~@wip'
          fi
      - name: Merge code coverage reports
        if: matrix.coverage
        run: |
          wget -qO /usr/local/bin/phpcov https://phar.phpunit.de/phpcov.phar
          chmod +x /usr/local/bin/phpcov
          phpcov merge --clover build/logs/behat/clover.xml build/coverage
        continue-on-error: true
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: behat-logs-php${{ matrix.php }}
          path: build/logs/behat
        continue-on-error: true
      - name: Upload coverage results to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v1
        with:
          name: behat-php${{ matrix.php }}
          flags: behat
          fail_ci_if_error: true
        continue-on-error: true
#      - name: Upload coverage results to Codeclimate
#        if: matrix.coverage
#        uses: paambaati/codeclimate-action@v2.5.6
#        env:
#          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
#        with:
#          coverageCommand: echo 'PHPUnit already run...'
#          coverageLocations: build/logs/behat/clover.xml:clover
#        continue-on-error: true

  phpunit-lowest-deps:
    name: PHPUnit (Symfony ${{ matrix.symfony }}) (PHP ${{ matrix.php }}) (lowest dependencies)
    runs-on: ubuntu-latest
    container:
      image: php:${{ matrix.php }}-alpine
      options: >-
        --tmpfs /tmp:exec
        --tmpfs /var/tmp:exec
    strategy:
      matrix:
        php:
          - '7.4'
        symfony:
          - '4.4.*'
          - '5.*'
      fail-fast: false
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install system packages
        run: |
          apk add \
            unzip \
            libxslt-dev \
            libpng-dev \
            libjpeg-turbo-dev \
            freetype-dev \
            git
      - name: Install exif PHP extension
        run: |
          docker-php-ext-install exif xsl
      - name: Install php image extensions
        run: |
          docker-php-ext-configure gd --with-freetype --with-jpeg
          docker-php-ext-install gd
      - name: Disable PHP memory limit
        run: echo 'memory_limit=-1' >> /usr/local/etc/php/php.ini
      - name: Install Composer
        run: wget -qO - https://raw.githubusercontent.com/composer/getcomposer.org/$COMPOSER_INSTALLER_COMMIT/web/installer | php -- --install-dir=/usr/local/bin --filename=composer --quiet
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore composer cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: composer-lowest-deps-php${{ matrix.php }}-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            composer-lowest-deps-php${{ matrix.php }}-
          continue-on-error: true
      - name: Install Symfony Flex & Configure Symfony Version
        run: |
          composer global require --prefer-dist --no-progress --no-suggest --ansi \
            symfony/flex
          composer config extra.symfony.require "${{ matrix.symfony }}"
      - name: Update project dependencies
        run: |
          mkdir -p /tmp/api-component/core/vendor
          ln -s /tmp/api-component/core/vendor vendor
          composer update --no-progress --no-suggest --ansi --prefer-stable --prefer-lowest
      - name: Clear test app cache
        run: |
          mkdir -p /tmp/api-component/core/var
          ln -s /tmp/api-component/core/var tests/Functional/app/var
          tests/Functional/app/console cache:clear --ansi
      - name: Run PHPUnit tests
        run: |
          mkdir -p build/logs/phpunit
          vendor/bin/phpunit --log-junit build/logs/phpunit/junit.xml --colors=always
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: phpunit-logs-php${{ matrix.php }}-lowest-deps
          path: build/logs/phpunit
        continue-on-error: true

  behat-lowest-deps:
    name: Behat (Symfony ${{ matrix.symfony }}) (PHP ${{ matrix.php }}) (lowest dependencies)
    runs-on: ubuntu-latest
    container:
      image: php:${{ matrix.php }}-alpine
      options: >-
        --tmpfs /tmp:exec
        --tmpfs /var/tmp:exec
    strategy:
      matrix:
        php:
          - '7.4'
        symfony:
          - '4.4.*'
          - '5.*'
      fail-fast: false
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install system packages
        run: |
          apk add \
              unzip \
              libxslt-dev \
              libpng-dev \
              libjpeg-turbo-dev \
              freetype-dev \
              git
      - name: Install exif PHP extension
        run: |
          docker-php-ext-install exif xsl
      - name: Install php image extensions
        run: |
          docker-php-ext-configure gd --with-freetype --with-jpeg
          docker-php-ext-install gd
      - name: Disable PHP memory limit
        run: echo 'memory_limit=-1' >> /usr/local/etc/php/php.ini
      - name: Install Composer
        run: wget -qO - https://raw.githubusercontent.com/composer/getcomposer.org/$COMPOSER_INSTALLER_COMMIT/web/installer | php -- --install-dir=/usr/local/bin --filename=composer --quiet
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore composer cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: composer-lowest-deps-php${{ matrix.php }}-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            composer-lowest-deps-php${{ matrix.php }}-
          continue-on-error: true
      - name: Install Symfony Flex & Configure Symfony Version
        run: |
          composer global require --prefer-dist --no-progress --no-suggest --ansi \
            symfony/flex
          composer config extra.symfony.require "${{ matrix.symfony }}"
      - name: Update project dependencies
        run: |
          mkdir -p /tmp/api-component/core/vendor
          ln -s /tmp/api-component/core/vendor vendor
          composer update --no-progress --no-suggest --ansi --prefer-stable --prefer-lowest
      - name: Clear test app cache
        run: |
          mkdir -p /tmp/api-component/core/var
          ln -s /tmp/api-component/core/var tests/Functional/app/var
          tests/Functional/app/console cache:clear --ansi
      - name: Run Behat tests
        run: |
          mkdir -p build/logs/behat
          vendor/bin/behat --format=progress --out=std --format=junit --out=build/logs/behat/junit --profile=default --no-interaction --colors --tags='~@wip'
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: behat-logs-php${{ matrix.php }}-lowest-deps
          path: build/logs/behat
        continue-on-error: true
